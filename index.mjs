import{forwardRef as r}from"react";const t=(r,t)=>[r,t].filter(Boolean).join(" "),e=(...r)=>r.reduce(((r,o)=>{if(o){const n=(r=>{if("string"==typeof r||"number"==typeof r)return`${r}`;if(Array.isArray(r))return e(...r);if("object"==typeof r){let o="";for(let n in r)r[n]&&(o=t(o,e(n)));return o}return""})(o);return t(r,n)}return r}),""),o=r=>{if("object"!=typeof r||null===r)return!1;const t=Object.getPrototypeOf(r);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in r||Symbol.iterator in r)},n=(...r)=>r.length?r.reduce(((r,t)=>{if("object"!=typeof t||Array.isArray(t))return r;for(const e in t)o(t[e])&&!Array.isArray(t[e])?r[e]=n(r[e],t[e]):r[e]=structuredClone(t[e]);return r}),{}):{},s=r=>r;function a(r,t){const{className:o,component:a,ref:c,props:i,extraProps:l,classNameMergeFn:u=s}=t,{component:f,slots:p={[r]:void 0},slotProps:m={[r]:void 0},...y}=i,b={[r]:void 0,...m},d=("root"===r?f:p[r])??a,g=u(e(o??"",{[i.className]:"root"===r&&!!i.className},l?.className??!1,b[r]?.className));return[d,Object.assign(n("root"===r?y:{},l,b[r],g?{className:g}:{}),{ref:c})]}function c(t,e){const o=r(t);return o.displayName=e??`@zemd/react-slottable/${t.name??"UnknownComponent"}`,o}export{c as createSlottableComponent,a as useSlot};
